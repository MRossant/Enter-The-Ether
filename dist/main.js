/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/chart */ \"./src/scripts/chart.js\");\n/* harmony import */ var _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scripts_chart__WEBPACK_IMPORTED_MODULE_0__);\n// import fetch from \"node-fetch\";\n\nconst PRICES = 'PRICES';\nconst MARKET = 'MARKET';\nconst VOLUME = 'VOLUME';\nconst EtherscanAPIKey = 'UMRN2NVDV6CCZJB2QM1SAAZMEXUHNFDV7D';\nconst currentUnixTimestamp = getCurrentUnixTimestamp();\nconst unix3Months = getPreviousDateUnix(90);\nconst unix6Months = getPreviousDateUnix(180);\nconst unix1Yr = getPreviousDateUnix(360);\nconst unix2Yr = getPreviousDateUnix(720);\nlet curEthPrice = 0;\nlet curEthCir = 0;\nlet curEthCap = 0;\nlet curETHPerc1Hr = 0;\nlet curETHPerc24Hr = 0;\nlet curETHPerc7d = 0;\n\nfunction getCurrentUnixTimestamp() {\n  const date = new Date();\n  return Math.floor(date.getTime() / 1000);\n}\n\nfunction getPreviousDateUnix(previousDays) {\n  const date = new Date();\n  date.setDate(date.getDate() - previousDays);\n  return Math.floor(date.getTime() / 1000);\n}\n\nasync function getData(url) {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n\n  const data = await response.json();\n  return data;\n}\n\nfunction getDataApi(path) {\n  // \"price\"\n  fetch(`price`).then(res => {\n    // debugger\n    res.json();\n  });\n}\n\nwindow.getDataApi = getDataApi;\n\nfunction getETHPrice() {\n  getData(`https://api.etherscan.io/api?module=stats&action=ethprice&apikey=${EtherscanAPIKey}`).then(data => {\n    curEthPrice = data.result.ethusd;\n    const ethPriceHTML = document.getElementById(\"eth-price\");\n    ethPriceHTML.innerHTML = `<h1>$${numberWithCommas(curEthPrice)}</h1>`;\n  });\n}\n\nfunction getGasPrice() {\n  getData(`https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=${EtherscanAPIKey}`).then(data => {\n    const ethGasHTML = document.getElementById(\"eth-gas\");\n    ethGasHTML.innerHTML = `<h1>${data.result.ProposeGasPrice}</h1>`;\n  });\n}\n\nfunction getETHCir() {\n  getData(`https://api.etherscan.io/api?module=stats&action=ethsupply&apikey=${EtherscanAPIKey}`).then(data => {\n    curEthCir = data.result * 10 ** -18;\n    curEthCap = curEthCir * curEthPrice;\n    const ethCirHTML = document.getElementById(\"eth-cir\");\n    ethCirHTML.innerHTML = `<h1>${numberWithCommas(curEthCir.toFixed(2))}</h1>`;\n  });\n}\n\nfunction getETHMarketCap() {\n  getData(\"https://api.coingecko.com/api/v3/coins/ethereum?localization=false&market_data=true&community_data=false&developer_data=true\").then(data => {\n    curEthCap = data.market_data.market_cap.usd;\n    curETHPerc1Hr = data.market_data.price_change_percentage_1h_in_currency.usd;\n    curETHPerc24Hr = data.market_data.price_change_percentage_24h_in_currency.usd;\n    curETHPerc7d = data.market_data.price_change_percentage_7d_in_currency.usd;\n    const ethPriceChange1hrHTML = document.getElementById(\"eth-price-change-1hr\");\n    const ethPriceChange24hrHTML = document.getElementById(\"eth-price-change-24hr\");\n    const ethPriceChange7dHTML = document.getElementById(\"eth-price-change-7d\");\n    const ethCapHTML = document.getElementById(\"eth-cap\");\n    ethCapHTML.innerHTML = `<h1>$${numberWithCommas(curEthCap)}</h1>`;\n    ethPriceChange1hrHTML.innerHTML = `<span>${curETHPerc1Hr.toFixed(2)} %</span>`;\n\n    if (curETHPerc1Hr < 0) {\n      ethPriceChange1hrHTML.classList.add(\"red\");\n    } else {\n      ethPriceChange1hrHTML.classList.add(\"green\");\n    }\n\n    ethPriceChange24hrHTML.innerHTML = `<span>${curETHPerc24Hr.toFixed(2)} %</span>`;\n\n    if (curETHPerc24Hr < 0) {\n      ethPriceChange24hrHTML.classList.add(\"red\");\n    } else {\n      ethPriceChange24hrHTML.classList.add(\"green\");\n    }\n\n    ethPriceChange7dHTML.innerHTML = `<span>${curETHPerc7d.toFixed(2)} %</span>`;\n\n    if (curETHPerc7d < 0) {\n      ethPriceChange7dHTML.classList.add(\"red\");\n    } else {\n      ethPriceChange7dHTML.classList.add(\"green\");\n    }\n  });\n}\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction timeConverter(unixTimestamp) {\n  let a = new Date(unixTimestamp);\n  let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  let year = a.getFullYear();\n  let month = a.getMonth() + 1;\n  month.toString();\n  let date = a.getDate();\n  let fullDate = year + '-' + month + '-' + date; // 2021-10-21\n\n  return fullDate;\n}\n\nfunction getETHHistorical(value, unix) {\n  getData(`https://api.coingecko.com/api/v3/coins/ethereum/market_chart/range?vs_currency=usd&from=${unix}&to=${currentUnixTimestamp}`).then(data => {\n    const prices = data.prices;\n    const marketCap = data.market_caps;\n    const totalVol = data.total_volumes;\n    const price = \"Price\";\n    const volume = \"Volume\";\n    const mktCap = \"Market Capitalization\";\n    const pricesArr = [];\n    const volArr = [];\n    const mktCapArr = [];\n    prices.forEach(price => {\n      let unixTimestamp = price[0];\n      let date = timeConverter(unixTimestamp);\n      price[0] = date;\n    });\n    marketCap.forEach(mktcap => {\n      let unixTimestamp = mktcap[0];\n      let date = timeConverter(unixTimestamp);\n      mktcap[0] = date;\n    });\n    totalVol.forEach(vol => {\n      let unixTimestamp = vol[0];\n      let date = timeConverter(unixTimestamp);\n      vol[0] = date;\n    });\n\n    switch (value) {\n      case PRICES:\n        {\n          prices.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            pricesArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n          break;\n        }\n\n      case MARKET:\n        {\n          marketCap.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            mktCapArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n          break;\n        }\n\n      case VOLUME:\n        {\n          totalVol.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            volArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n          break;\n        }\n\n      default:\n        {\n          prices.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            resultArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n        }\n    }\n\n    switch (true) {\n      case pricesArr.length !== 0:\n        _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default()(pricesArr, price);\n        break;\n\n      case volArr.length !== 0:\n        _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default()(volArr, volume);\n        break;\n\n      case mktCapArr.length !== 0:\n        _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default()(mktCapArr, mktCap);\n        break;\n    }\n  });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const enterBtn = document.querySelector(\"#cta-enter\");\n  enterBtn.addEventListener(\"click\", e => {\n    document.getElementById(\"fp-modal\").style.display = \"none\";\n    document.getElementById(\"home-page\").style.display = \"block\";\n  });\n  const infoBtn = document.getElementsByClassName(\"popup\");\n  infoBtn[0].addEventListener(\"click\", () => {\n    const popup = document.getElementById(\"mkt-cap-pop\");\n    popup.classList.toggle(\"show\");\n  }); // Get Current Eth Price\n\n  getETHPrice(); // Get Current Gas Price\n\n  getGasPrice(); // Get Current amount of ETH in circulation\n\n  getETHCir(); // Get Current ETH Market Cap\n\n  getETHMarketCap(); // Get ETH historical daily market data for past 3 months (price, volume, market cap)\n\n  getETHHistorical(PRICES, unix3Months);\n});\nwindow.addEventListener('load', () => {\n  let selectedOption = document.getElementById(\"data-type\");\n  let selectedRange = document.getElementById(\"time-range\");\n  let submitBtn = document.getElementById(\"submit-chart\");\n  submitBtn.addEventListener(\"click\", e => {\n    let selectedValue = selectedOption.options[selectedOption.selectedIndex].value;\n    let selectedDate = selectedRange.options[selectedRange.selectedIndex].value;\n\n    switch (true) {\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-three-months\":\n        {\n          getETHHistorical(PRICES, unix3Months);\n          break;\n        }\n\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-six-months\":\n        {\n          getETHHistorical(PRICES, unix6Months);\n          break;\n        }\n\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-one-yr\":\n        {\n          getETHHistorical(PRICES, unix1Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-two-yrs\":\n        {\n          getETHHistorical(PRICES, unix2Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-three-months\":\n        {\n          getETHHistorical(MARKET, unix3Months);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-six-months\":\n        {\n          getETHHistorical(MARKET, unix6Months);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-one-yr\":\n        {\n          getETHHistorical(MARKET, unix1Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-two-yrs\":\n        {\n          getETHHistorical(MARKET, unix2Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-three-months\":\n        {\n          getETHHistorical(VOLUME, unix3Months);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-six-months\":\n        {\n          getETHHistorical(VOLUME, unix6Months);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-one-yr\":\n        {\n          getETHHistorical(VOLUME, unix1Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-two-yrs\":\n        {\n          getETHHistorical(VOLUME, unix2Yr);\n          break;\n        }\n\n      default:\n        {\n          getETHHistorical(PRICES, unix3Months);\n        }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/chart.js":
/*!******************************!*\
  !*** ./src/scripts/chart.js ***!
  \******************************/
/***/ ((module) => {

eval("function drawChart(data, title) {\n  // console.log(data);\n  const svgWidth = 1500,\n        svgHeight = 500;\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 88\n  };\n  const width = 1000 - margin.left - margin.right;\n  const height = svgHeight - margin.top - margin.bottom;\n  const svg = d3.select('svg');\n  svg.selectAll(\"svg > *\").remove();\n  svg.attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n  const g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  const x = d3.scaleTime().rangeRound([0, width]);\n  const y = d3.scaleLinear().rangeRound([height, 0]);\n  var parseTime = d3.timeFormat(\"%B %d, %Y\");\n  const line = d3.line().x(function (d) {\n    return x(d.date);\n  }).y(function (d) {\n    return y(d.value);\n  });\n  x.domain(d3.extent(data, function (d) {\n    return d.date;\n  }));\n  y.domain(d3.extent(data, function (d) {\n    return d.value;\n  }));\n  g.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)).select(\".domain\").remove();\n  g.append(\"g\").call(d3.axisLeft(y)).append(\"text\").attr(\"fill\", \"#000\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \"0.71em\").attr(\"text-anchor\", \"end\").text(`${title} ($)`);\n  g.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-linecap\", \"round\").attr(\"stroke-width\", 1.5).attr(\"d\", line);\n\n  const bisectDate = d3.bisector(function (d) {\n    return d.date;\n  }).left,\n        formatValue = d3.format(\",.2f\"),\n        formatCurrency = function (d) {\n    return \"$\" + formatValue(d);\n  };\n\n  const focus = g.append(\"g\").attr(\"class\", \"focus\").style(\"width\", \"auto\").style(\"display\", \"none\").style(\"position\", \"absolute\"); // .style(\"z-index\", 1000)\n\n  focus.append(\"circle\").attr(\"class\", \"y\").style(\"fill\", \"blueviolet\").style(\"stroke\", \"blueviolet\").attr(\"r\", 3.5);\n  focus.append(\"text\").attr(\"x\", 9).attr(\"dy\", \".35em\");\n  g.append(\"rect\").attr(\"class\", \"overlay\").attr(\"width\", width).attr(\"height\", height).style(\"position\", \"absolute\") //   .style(\"margin-left\", \"5px\")\n  .style(\"fill\", \"none\").style(\"pointer-events\", \"all\").on(\"mouseover\", function () {\n    focus.style(\"display\", null);\n  }).on(\"mouseout\", function () {\n    focus.style(\"display\", \"none\");\n  }).on(\"mousemove\", mousemove);\n\n  function mousemove() {\n    // debugger\n    var x0 = x.invert(d3.mouse(this)[0]),\n        i = bisectDate(data, x0, 1),\n        d0 = data[i - 1],\n        d1 = data[i],\n        d = x0 - d0.date > d1.date - x0 ? d1 : d0; // let valuesArr = [formatCurrency(d.value), d.date];\n\n    focus.attr(\"transform\", \"translate(\" + x(d.date) + \",\" + y(d.value) + \")\"); // focus.select(\"text\").html(`${formatCurrency(d.value)}` + `<br>` + `${d.date}`)\n\n    focus.select(\"text\").html(function () {\n      return `${formatCurrency(d.value)}` + ` ${parseTime(d.date)}`;\n    });\n  }\n}\n\nmodule.exports = drawChart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/chart.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbnRlci10aGUtZXRoZXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;