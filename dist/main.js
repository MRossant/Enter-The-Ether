/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/chart */ \"./src/scripts/chart.js\");\n/* harmony import */ var _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scripts_chart__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dotenv */ \"./node_modules/dotenv/lib/main.js\");\n// import fetch from \"node-fetch\";\n\n\ndotenv__WEBPACK_IMPORTED_MODULE_1__.config();\nconst PRICES = 'PRICES';\nconst MARKET = 'MARKET';\nconst VOLUME = 'VOLUME';\nconst EtherscanAPIKey = process.env.ETHERSCAN_API_KEY;\nconst currentUnixTimestamp = getCurrentUnixTimestamp();\nconst unix3Months = getPreviousDateUnix(90);\nconst unix6Months = getPreviousDateUnix(180);\nconst unix1Yr = getPreviousDateUnix(360);\nconst unix2Yr = getPreviousDateUnix(720);\nlet curEthPrice = 0;\nlet curEthCir = 0;\nlet curEthCap = 0;\nlet curETHPerc1Hr = 0;\nlet curETHPerc24Hr = 0;\nlet curETHPerc7d = 0;\n\nfunction getCurrentUnixTimestamp() {\n  const date = new Date();\n  return Math.floor(date.getTime() / 1000);\n}\n\nfunction getPreviousDateUnix(previousDays) {\n  const date = new Date();\n  date.setDate(date.getDate() - previousDays);\n  return Math.floor(date.getTime() / 1000);\n}\n\nasync function getData(url) {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n\n  const data = await response.json();\n  return data;\n}\n\nfunction getDataApi(path) {\n  // \"price\"\n  fetch(`price`).then(res => {\n    // debugger\n    res.json();\n  });\n}\n\nwindow.getDataApi = getDataApi;\n\nfunction getETHPrice() {\n  getData(`https://api.etherscan.io/api?module=stats&action=ethprice&apikey=${EtherscanAPIKey}`).then(data => {\n    curEthPrice = data.result.ethusd;\n    const ethPriceHTML = document.getElementById(\"eth-price\");\n    ethPriceHTML.innerHTML = `<h1>$${numberWithCommas(curEthPrice)}</h1>`;\n  });\n}\n\nfunction getGasPrice() {\n  getData(`https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=${EtherscanAPIKey}`).then(data => {\n    const ethGasHTML = document.getElementById(\"eth-gas\");\n    ethGasHTML.innerHTML = `<h1>${data.result.ProposeGasPrice}</h1>`;\n  });\n}\n\nfunction getETHCir() {\n  getData(`https://api.etherscan.io/api?module=stats&action=ethsupply&apikey=${EtherscanAPIKey}`).then(data => {\n    curEthCir = data.result * 10 ** -18;\n    curEthCap = curEthCir * curEthPrice;\n    const ethCirHTML = document.getElementById(\"eth-cir\");\n    ethCirHTML.innerHTML = `<h1>${numberWithCommas(curEthCir.toFixed(2))}</h1>`;\n  });\n}\n\nfunction getETHMarketCap() {\n  getData(\"https://api.coingecko.com/api/v3/coins/ethereum?localization=false&market_data=true&community_data=false&developer_data=true\").then(data => {\n    curEthCap = data.market_data.market_cap.usd;\n    curETHPerc1Hr = data.market_data.price_change_percentage_1h_in_currency.usd;\n    curETHPerc24Hr = data.market_data.price_change_percentage_24h_in_currency.usd;\n    curETHPerc7d = data.market_data.price_change_percentage_7d_in_currency.usd;\n    const ethPriceChange1hrHTML = document.getElementById(\"eth-price-change-1hr\");\n    const ethPriceChange24hrHTML = document.getElementById(\"eth-price-change-24hr\");\n    const ethPriceChange7dHTML = document.getElementById(\"eth-price-change-7d\");\n    const ethCapHTML = document.getElementById(\"eth-cap\");\n    ethCapHTML.innerHTML = `<h1>$${numberWithCommas(curEthCap)}</h1>`;\n    ethPriceChange1hrHTML.innerHTML = `<span>${curETHPerc1Hr.toFixed(2)} %</span>`;\n\n    if (curETHPerc1Hr < 0) {\n      ethPriceChange1hrHTML.classList.add(\"red\");\n    } else {\n      ethPriceChange1hrHTML.classList.add(\"green\");\n    }\n\n    ethPriceChange24hrHTML.innerHTML = `<span>${curETHPerc24Hr.toFixed(2)} %</span>`;\n\n    if (curETHPerc24Hr < 0) {\n      ethPriceChange24hrHTML.classList.add(\"red\");\n    } else {\n      ethPriceChange24hrHTML.classList.add(\"green\");\n    }\n\n    ethPriceChange7dHTML.innerHTML = `<span>${curETHPerc7d.toFixed(2)} %</span>`;\n\n    if (curETHPerc7d < 0) {\n      ethPriceChange7dHTML.classList.add(\"red\");\n    } else {\n      ethPriceChange7dHTML.classList.add(\"green\");\n    }\n  });\n}\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction timeConverter(unixTimestamp) {\n  let a = new Date(unixTimestamp);\n  let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  let year = a.getFullYear();\n  let month = a.getMonth() + 1;\n  month.toString();\n  let date = a.getDate();\n  let fullDate = year + '-' + month + '-' + date; // 2021-10-21\n\n  return fullDate;\n}\n\nfunction getETHHistorical(value, unix) {\n  getData(`https://api.coingecko.com/api/v3/coins/ethereum/market_chart/range?vs_currency=usd&from=${unix}&to=${currentUnixTimestamp}`).then(data => {\n    const prices = data.prices;\n    const marketCap = data.market_caps;\n    const totalVol = data.total_volumes;\n    const price = \"Price\";\n    const volume = \"Volume\";\n    const mktCap = \"Market Capitalization\";\n    const pricesArr = [];\n    const volArr = [];\n    const mktCapArr = [];\n    prices.forEach(price => {\n      let unixTimestamp = price[0];\n      let date = timeConverter(unixTimestamp);\n      price[0] = date;\n    });\n    marketCap.forEach(mktcap => {\n      let unixTimestamp = mktcap[0];\n      let date = timeConverter(unixTimestamp);\n      mktcap[0] = date;\n    });\n    totalVol.forEach(vol => {\n      let unixTimestamp = vol[0];\n      let date = timeConverter(unixTimestamp);\n      vol[0] = date;\n    });\n\n    switch (value) {\n      case PRICES:\n        {\n          prices.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            pricesArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n          break;\n        }\n\n      case MARKET:\n        {\n          marketCap.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            mktCapArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n          break;\n        }\n\n      case VOLUME:\n        {\n          totalVol.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            volArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n          break;\n        }\n\n      default:\n        {\n          prices.forEach(price => {\n            let date = price[0];\n            let numString = price[1];\n            let parsedNum = parseInt(numString);\n            resultArr.push({\n              date: new Date(date),\n              value: parsedNum\n            });\n          });\n        }\n    }\n\n    switch (true) {\n      case pricesArr.length !== 0:\n        _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default()(pricesArr, price);\n        break;\n\n      case volArr.length !== 0:\n        _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default()(volArr, volume);\n        break;\n\n      case mktCapArr.length !== 0:\n        _scripts_chart__WEBPACK_IMPORTED_MODULE_0___default()(mktCapArr, mktCap);\n        break;\n    }\n  });\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const enterBtn = document.querySelector(\"#cta-enter\");\n  enterBtn.addEventListener(\"click\", e => {\n    document.getElementById(\"fp-modal\").style.display = \"none\";\n    document.getElementById(\"home-page\").style.display = \"block\";\n  });\n  const infoBtn = document.getElementsByClassName(\"popup\");\n  infoBtn[0].addEventListener(\"click\", () => {\n    const popup = document.getElementById(\"mkt-cap-pop\");\n    popup.classList.toggle(\"show\");\n  }); // Get Current Eth Price\n\n  getETHPrice(); // Get Current Gas Price\n\n  getGasPrice(); // Get Current amount of ETH in circulation\n\n  getETHCir(); // Get Current ETH Market Cap\n\n  getETHMarketCap(); // Get ETH historical daily market data for past 3 months (price, volume, market cap)\n\n  getETHHistorical(PRICES, unix3Months);\n});\nwindow.addEventListener('load', () => {\n  let selectedOption = document.getElementById(\"data-type\");\n  let selectedRange = document.getElementById(\"time-range\");\n  let submitBtn = document.getElementById(\"submit-chart\");\n  submitBtn.addEventListener(\"click\", e => {\n    let selectedValue = selectedOption.options[selectedOption.selectedIndex].value;\n    let selectedDate = selectedRange.options[selectedRange.selectedIndex].value;\n\n    switch (true) {\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-three-months\":\n        {\n          getETHHistorical(PRICES, unix3Months);\n          break;\n        }\n\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-six-months\":\n        {\n          getETHHistorical(PRICES, unix6Months);\n          break;\n        }\n\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-one-yr\":\n        {\n          getETHHistorical(PRICES, unix1Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-prices\" && selectedDate === \"historical-two-yrs\":\n        {\n          getETHHistorical(PRICES, unix2Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-three-months\":\n        {\n          getETHHistorical(MARKET, unix3Months);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-six-months\":\n        {\n          getETHHistorical(MARKET, unix6Months);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-one-yr\":\n        {\n          getETHHistorical(MARKET, unix1Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-marketcap\" && selectedDate === \"historical-two-yrs\":\n        {\n          getETHHistorical(MARKET, unix2Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-three-months\":\n        {\n          getETHHistorical(VOLUME, unix3Months);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-six-months\":\n        {\n          getETHHistorical(VOLUME, unix6Months);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-one-yr\":\n        {\n          getETHHistorical(VOLUME, unix1Yr);\n          break;\n        }\n\n      case selectedValue === \"historical-volume\" && selectedDate === \"historical-two-yrs\":\n        {\n          getETHHistorical(VOLUME, unix2Yr);\n          break;\n        }\n\n      default:\n        {\n          getETHHistorical(PRICES, unix3Months);\n        }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/chart.js":
/*!******************************!*\
  !*** ./src/scripts/chart.js ***!
  \******************************/
/***/ ((module) => {

eval("function drawChart(data, title) {\n  // console.log(data);\n  const svgWidth = 1500,\n        svgHeight = 500;\n  const margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 88\n  };\n  const width = 1000 - margin.left - margin.right;\n  const height = svgHeight - margin.top - margin.bottom;\n  const svg = d3.select('svg');\n  svg.selectAll(\"svg > *\").remove();\n  svg.attr(\"width\", svgWidth).attr(\"height\", svgHeight);\n  const g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  const x = d3.scaleTime().rangeRound([0, width]);\n  const y = d3.scaleLinear().rangeRound([height, 0]);\n  var parseTime = d3.timeFormat(\"%B %d, %Y\");\n  const line = d3.line().x(function (d) {\n    return x(d.date);\n  }).y(function (d) {\n    return y(d.value);\n  });\n  x.domain(d3.extent(data, function (d) {\n    return d.date;\n  }));\n  y.domain(d3.extent(data, function (d) {\n    return d.value;\n  }));\n  g.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)).select(\".domain\").remove();\n  g.append(\"g\").call(d3.axisLeft(y)).append(\"text\").attr(\"fill\", \"#000\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \"0.71em\").attr(\"text-anchor\", \"end\").text(`${title} ($)`);\n  g.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-linecap\", \"round\").attr(\"stroke-width\", 1.5).attr(\"d\", line);\n\n  const bisectDate = d3.bisector(function (d) {\n    return d.date;\n  }).left,\n        formatValue = d3.format(\",.2f\"),\n        formatCurrency = function (d) {\n    return \"$\" + formatValue(d);\n  };\n\n  const focus = g.append(\"g\").attr(\"class\", \"focus\").style(\"width\", \"auto\").style(\"display\", \"none\").style(\"position\", \"absolute\"); // .style(\"z-index\", 1000)\n\n  focus.append(\"circle\").attr(\"class\", \"y\").style(\"fill\", \"blueviolet\").style(\"stroke\", \"blueviolet\").attr(\"r\", 3.5);\n  focus.append(\"text\").attr(\"x\", 9).attr(\"dy\", \".35em\");\n  g.append(\"rect\").attr(\"class\", \"overlay\").attr(\"width\", width).attr(\"height\", height).style(\"position\", \"absolute\") //   .style(\"margin-left\", \"5px\")\n  .style(\"fill\", \"none\").style(\"pointer-events\", \"all\").on(\"mouseover\", function () {\n    focus.style(\"display\", null);\n  }).on(\"mouseout\", function () {\n    focus.style(\"display\", \"none\");\n  }).on(\"mousemove\", mousemove);\n\n  function mousemove() {\n    // debugger\n    var x0 = x.invert(d3.mouse(this)[0]),\n        i = bisectDate(data, x0, 1),\n        d0 = data[i - 1],\n        d1 = data[i],\n        d = x0 - d0.date > d1.date - x0 ? d1 : d0; // let valuesArr = [formatCurrency(d.value), d.date];\n\n    focus.attr(\"transform\", \"translate(\" + x(d.date) + \",\" + y(d.value) + \")\"); // focus.select(\"text\").html(`${formatCurrency(d.value)}` + `<br>` + `${d.date}`)\n\n    focus.select(\"text\").html(function () {\n      return `${formatCurrency(d.value)}` + ` ${parseTime(d.date)}`;\n    });\n  }\n}\n\nmodule.exports = drawChart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/chart.js\n");

/***/ }),

/***/ "./node_modules/dotenv/lib/main.js":
/*!*****************************************!*\
  !*** ./node_modules/dotenv/lib/main.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = __webpack_require__(/*! fs */ \"fs\")\nconst path = __webpack_require__(/*! path */ \"path\")\nconst os = __webpack_require__(/*! os */ \"os\")\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\nfunction resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG90ZW52L2xpYi9tYWluLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixXQUFXLG1CQUFPLENBQUMsY0FBSTs7QUFFdkI7QUFDQSxpQ0FBaUMsUUFBUTtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTiwyREFBMkQsUUFBUSxJQUFJLEtBQUs7QUFDNUU7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELFVBQVUsS0FBSyxPQUFPOztBQUU3RTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsZ0JBQWdCLElBQUk7QUFDcEI7QUFDQSxLQUFLOztBQUVMLGFBQWE7QUFDYixJQUFJO0FBQ0osYUFBYTtBQUNiO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2VudGVyLXRoZS1ldGhlci8uL25vZGVfbW9kdWxlcy9kb3RlbnYvbGliL21haW4uanM/ZWQxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuLyo6OlxuXG50eXBlIERvdGVudlBhcnNlT3B0aW9ucyA9IHtcbiAgZGVidWc/OiBib29sZWFuXG59XG5cbi8vIGtleXMgYW5kIHZhbHVlcyBmcm9tIHNyY1xudHlwZSBEb3RlbnZQYXJzZU91dHB1dCA9IHsgW3N0cmluZ106IHN0cmluZyB9XG5cbnR5cGUgRG90ZW52Q29uZmlnT3B0aW9ucyA9IHtcbiAgcGF0aD86IHN0cmluZywgLy8gcGF0aCB0byAuZW52IGZpbGVcbiAgZW5jb2Rpbmc/OiBzdHJpbmcsIC8vIGVuY29kaW5nIG9mIC5lbnYgZmlsZVxuICBkZWJ1Zz86IHN0cmluZyAvLyB0dXJuIG9uIGxvZ2dpbmcgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xufVxuXG50eXBlIERvdGVudkNvbmZpZ091dHB1dCA9IHtcbiAgcGFyc2VkPzogRG90ZW52UGFyc2VPdXRwdXQsXG4gIGVycm9yPzogRXJyb3Jcbn1cblxuKi9cblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJylcblxuZnVuY3Rpb24gbG9nIChtZXNzYWdlIC8qOiBzdHJpbmcgKi8pIHtcbiAgY29uc29sZS5sb2coYFtkb3RlbnZdW0RFQlVHXSAke21lc3NhZ2V9YClcbn1cblxuY29uc3QgTkVXTElORSA9ICdcXG4nXG5jb25zdCBSRV9JTklfS0VZX1ZBTCA9IC9eXFxzKihbXFx3Li1dKylcXHMqPVxccyooLiopP1xccyokL1xuY29uc3QgUkVfTkVXTElORVMgPSAvXFxcXG4vZ1xuY29uc3QgTkVXTElORVNfTUFUQ0ggPSAvXFxyXFxufFxcbnxcXHIvXG5cbi8vIFBhcnNlcyBzcmMgaW50byBhbiBPYmplY3RcbmZ1bmN0aW9uIHBhcnNlIChzcmMgLyo6IHN0cmluZyB8IEJ1ZmZlciAqLywgb3B0aW9ucyAvKjogP0RvdGVudlBhcnNlT3B0aW9ucyAqLykgLyo6IERvdGVudlBhcnNlT3V0cHV0ICovIHtcbiAgY29uc3QgZGVidWcgPSBCb29sZWFuKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWJ1ZylcbiAgY29uc3Qgb2JqID0ge31cblxuICAvLyBjb252ZXJ0IEJ1ZmZlcnMgYmVmb3JlIHNwbGl0dGluZyBpbnRvIGxpbmVzIGFuZCBwcm9jZXNzaW5nXG4gIHNyYy50b1N0cmluZygpLnNwbGl0KE5FV0xJTkVTX01BVENIKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lLCBpZHgpIHtcbiAgICAvLyBtYXRjaGluZyBcIktFWScgYW5kICdWQUwnIGluICdLRVk9VkFMJ1xuICAgIGNvbnN0IGtleVZhbHVlQXJyID0gbGluZS5tYXRjaChSRV9JTklfS0VZX1ZBTClcbiAgICAvLyBtYXRjaGVkP1xuICAgIGlmIChrZXlWYWx1ZUFyciAhPSBudWxsKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlWYWx1ZUFyclsxXVxuICAgICAgLy8gZGVmYXVsdCB1bmRlZmluZWQgb3IgbWlzc2luZyB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nXG4gICAgICBsZXQgdmFsID0gKGtleVZhbHVlQXJyWzJdIHx8ICcnKVxuICAgICAgY29uc3QgZW5kID0gdmFsLmxlbmd0aCAtIDFcbiAgICAgIGNvbnN0IGlzRG91YmxlUXVvdGVkID0gdmFsWzBdID09PSAnXCInICYmIHZhbFtlbmRdID09PSAnXCInXG4gICAgICBjb25zdCBpc1NpbmdsZVF1b3RlZCA9IHZhbFswXSA9PT0gXCInXCIgJiYgdmFsW2VuZF0gPT09IFwiJ1wiXG5cbiAgICAgIC8vIGlmIHNpbmdsZSBvciBkb3VibGUgcXVvdGVkLCByZW1vdmUgcXVvdGVzXG4gICAgICBpZiAoaXNTaW5nbGVRdW90ZWQgfHwgaXNEb3VibGVRdW90ZWQpIHtcbiAgICAgICAgdmFsID0gdmFsLnN1YnN0cmluZygxLCBlbmQpXG5cbiAgICAgICAgLy8gaWYgZG91YmxlIHF1b3RlZCwgZXhwYW5kIG5ld2xpbmVzXG4gICAgICAgIGlmIChpc0RvdWJsZVF1b3RlZCkge1xuICAgICAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKFJFX05FV0xJTkVTLCBORVdMSU5FKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZW1vdmUgc3Vycm91bmRpbmcgd2hpdGVzcGFjZVxuICAgICAgICB2YWwgPSB2YWwudHJpbSgpXG4gICAgICB9XG5cbiAgICAgIG9ialtrZXldID0gdmFsXG4gICAgfSBlbHNlIGlmIChkZWJ1Zykge1xuICAgICAgbG9nKGBkaWQgbm90IG1hdGNoIGtleSBhbmQgdmFsdWUgd2hlbiBwYXJzaW5nIGxpbmUgJHtpZHggKyAxfTogJHtsaW5lfWApXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBvYmpcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUhvbWUgKGVudlBhdGgpIHtcbiAgcmV0dXJuIGVudlBhdGhbMF0gPT09ICd+JyA/IHBhdGguam9pbihvcy5ob21lZGlyKCksIGVudlBhdGguc2xpY2UoMSkpIDogZW52UGF0aFxufVxuXG4vLyBQb3B1bGF0ZXMgcHJvY2Vzcy5lbnYgZnJvbSAuZW52IGZpbGVcbmZ1bmN0aW9uIGNvbmZpZyAob3B0aW9ucyAvKjogP0RvdGVudkNvbmZpZ09wdGlvbnMgKi8pIC8qOiBEb3RlbnZDb25maWdPdXRwdXQgKi8ge1xuICBsZXQgZG90ZW52UGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLmVudicpXG4gIGxldCBlbmNvZGluZyAvKjogc3RyaW5nICovID0gJ3V0ZjgnXG4gIGxldCBkZWJ1ZyA9IGZhbHNlXG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXRoICE9IG51bGwpIHtcbiAgICAgIGRvdGVudlBhdGggPSByZXNvbHZlSG9tZShvcHRpb25zLnBhdGgpXG4gICAgfVxuICAgIGlmIChvcHRpb25zLmVuY29kaW5nICE9IG51bGwpIHtcbiAgICAgIGVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZ1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5kZWJ1ZyAhPSBudWxsKSB7XG4gICAgICBkZWJ1ZyA9IHRydWVcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIC8vIHNwZWNpZnlpbmcgYW4gZW5jb2RpbmcgcmV0dXJucyBhIHN0cmluZyBpbnN0ZWFkIG9mIGEgYnVmZmVyXG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2UoZnMucmVhZEZpbGVTeW5jKGRvdGVudlBhdGgsIHsgZW5jb2RpbmcgfSksIHsgZGVidWcgfSlcblxuICAgIE9iamVjdC5rZXlzKHBhcnNlZCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9jZXNzLmVudiwga2V5KSkge1xuICAgICAgICBwcm9jZXNzLmVudltrZXldID0gcGFyc2VkW2tleV1cbiAgICAgIH0gZWxzZSBpZiAoZGVidWcpIHtcbiAgICAgICAgbG9nKGBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBcXGBwcm9jZXNzLmVudlxcYCBhbmQgd2lsbCBub3QgYmUgb3ZlcndyaXR0ZW5gKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4geyBwYXJzZWQgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZXJyb3I6IGUgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLmNvbmZpZyA9IGNvbmZpZ1xubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/dotenv/lib/main.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lbnRlci10aGUtZXRoZXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;